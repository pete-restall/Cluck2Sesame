configuration for "PIC16F15356" is
	shared variable hostToDeviceByte0;
	shared variable hostToDeviceByte1;
	shared variable hostToDeviceByte2;
	shared variable hostToDeviceByte3;
	shared variable hostToDeviceNumberOfBytes;

	shared variable deviceToHostByte0;
	shared variable deviceToHostByte1;
	shared variable deviceToHostByte2;
	shared variable deviceToHostByte3;
	shared variable deviceToHostByte4;
	shared variable deviceToHostByte5;
	shared variable deviceToHostByte6;
	shared variable deviceToHostByte7;
	shared variable deviceToHostByte8;
	shared variable deviceToHostByte9;
	shared variable deviceToHostByte10;
	shared variable deviceToHostByte11;
	shared variable deviceToHostByte12;
	shared variable deviceToHostByte13;
	shared variable deviceToHostByte14;
	shared variable deviceToHostByte15;
	shared variable deviceToHostNumberOfBytes;

	shared variable fakeUart1IsSessionInvalid;
end configuration;

testbench for "PIC16F15356" is
begin
	fixtureReset: process is
		variable byteTransmissionTime : time;
	begin
		byteTransmissionTime := 1041 us; // (1 start + 8 data + 1 stop) bits / 9600 baud = 1041.6...us
		wait;
	end process;

	hostToDeviceTransmission: process is
		variable rxByteIndex : integer;
		variable rxByte : integer;
		variable rxString : string;
	begin
		loop
			rxByteIndex := 0;
			wait on hostToDeviceNumberOfBytes;
			while hostToDeviceNumberOfBytes > 0 loop
				if rxByteIndex == 0 then
					rxByte := hostToDeviceByte0;
					rxByteIndex := 1;
				elsif rxByteIndex == 1 then
					rxByte := hostToDeviceByte1;
					rxByteIndex := 2;
				elsif rxByteIndex == 2 then
					rxByte := hostToDeviceByte2;
					rxByteIndex := 3;
				else
					rxByte := hostToDeviceByte3;
					rxByteIndex := 0;
				end if;
				hostToDeviceNumberOfBytes := hostToDeviceNumberOfBytes - 1;

				if rxByte == 16#00# then rxString := "00";
				elsif rxByte == 16#01# then rxString := "01";
				elsif rxByte == 16#02# then rxString := "02";
				elsif rxByte == 16#03# then rxString := "03";
				elsif rxByte == 16#04# then rxString := "04";
				elsif rxByte == 16#05# then rxString := "05";
				elsif rxByte == 16#06# then rxString := "06";
				elsif rxByte == 16#07# then rxString := "07";
				elsif rxByte == 16#08# then rxString := "08";
				elsif rxByte == 16#09# then rxString := "09";
				elsif rxByte == 16#0a# then rxString := "0a";
				elsif rxByte == 16#0b# then rxString := "0b";
				elsif rxByte == 16#0c# then rxString := "0c";
				elsif rxByte == 16#0d# then rxString := "0d";
				elsif rxByte == 16#0e# then rxString := "0e";
				elsif rxByte == 16#0f# then rxString := "0f";
				elsif rxByte == 16#10# then rxString := "10";
				elsif rxByte == 16#11# then rxString := "11";
				elsif rxByte == 16#12# then rxString := "12";
				elsif rxByte == 16#13# then rxString := "13";
				elsif rxByte == 16#14# then rxString := "14";
				elsif rxByte == 16#15# then rxString := "15";
				elsif rxByte == 16#16# then rxString := "16";
				elsif rxByte == 16#17# then rxString := "17";
				elsif rxByte == 16#18# then rxString := "18";
				elsif rxByte == 16#19# then rxString := "19";
				elsif rxByte == 16#1a# then rxString := "1a";
				elsif rxByte == 16#1b# then rxString := "1b";
				elsif rxByte == 16#1c# then rxString := "1c";
				elsif rxByte == 16#1d# then rxString := "1d";
				elsif rxByte == 16#1e# then rxString := "1e";
				elsif rxByte == 16#1f# then rxString := "1f";
				elsif rxByte == 16#20# then rxString := "20";
				elsif rxByte == 16#21# then rxString := "21";
				elsif rxByte == 16#22# then rxString := "22";
				elsif rxByte == 16#23# then rxString := "23";
				elsif rxByte == 16#24# then rxString := "24";
				elsif rxByte == 16#25# then rxString := "25";
				elsif rxByte == 16#26# then rxString := "26";
				elsif rxByte == 16#27# then rxString := "27";
				elsif rxByte == 16#28# then rxString := "28";
				elsif rxByte == 16#29# then rxString := "29";
				elsif rxByte == 16#2a# then rxString := "2a";
				elsif rxByte == 16#2b# then rxString := "2b";
				elsif rxByte == 16#2c# then rxString := "2c";
				elsif rxByte == 16#2d# then rxString := "2d";
				elsif rxByte == 16#2e# then rxString := "2e";
				elsif rxByte == 16#2f# then rxString := "2f";
				elsif rxByte == 16#30# then rxString := "30";
				elsif rxByte == 16#31# then rxString := "31";
				elsif rxByte == 16#32# then rxString := "32";
				elsif rxByte == 16#33# then rxString := "33";
				elsif rxByte == 16#34# then rxString := "34";
				elsif rxByte == 16#35# then rxString := "35";
				elsif rxByte == 16#36# then rxString := "36";
				elsif rxByte == 16#37# then rxString := "37";
				elsif rxByte == 16#38# then rxString := "38";
				elsif rxByte == 16#39# then rxString := "39";
				elsif rxByte == 16#3a# then rxString := "3a";
				elsif rxByte == 16#3b# then rxString := "3b";
				elsif rxByte == 16#3c# then rxString := "3c";
				elsif rxByte == 16#3d# then rxString := "3d";
				elsif rxByte == 16#3e# then rxString := "3e";
				elsif rxByte == 16#3f# then rxString := "3f";
				elsif rxByte == 16#40# then rxString := "40";
				elsif rxByte == 16#41# then rxString := "41";
				elsif rxByte == 16#42# then rxString := "42";
				elsif rxByte == 16#43# then rxString := "43";
				elsif rxByte == 16#44# then rxString := "44";
				elsif rxByte == 16#45# then rxString := "45";
				elsif rxByte == 16#46# then rxString := "46";
				elsif rxByte == 16#47# then rxString := "47";
				elsif rxByte == 16#48# then rxString := "48";
				elsif rxByte == 16#49# then rxString := "49";
				elsif rxByte == 16#4a# then rxString := "4a";
				elsif rxByte == 16#4b# then rxString := "4b";
				elsif rxByte == 16#4c# then rxString := "4c";
				elsif rxByte == 16#4d# then rxString := "4d";
				elsif rxByte == 16#4e# then rxString := "4e";
				elsif rxByte == 16#4f# then rxString := "4f";
				elsif rxByte == 16#50# then rxString := "50";
				elsif rxByte == 16#51# then rxString := "51";
				elsif rxByte == 16#52# then rxString := "52";
				elsif rxByte == 16#53# then rxString := "53";
				elsif rxByte == 16#54# then rxString := "54";
				elsif rxByte == 16#55# then rxString := "55";
				elsif rxByte == 16#56# then rxString := "56";
				elsif rxByte == 16#57# then rxString := "57";
				elsif rxByte == 16#58# then rxString := "58";
				elsif rxByte == 16#59# then rxString := "59";
				elsif rxByte == 16#5a# then rxString := "5a";
				elsif rxByte == 16#5b# then rxString := "5b";
				elsif rxByte == 16#5c# then rxString := "5c";
				elsif rxByte == 16#5d# then rxString := "5d";
				elsif rxByte == 16#5e# then rxString := "5e";
				elsif rxByte == 16#5f# then rxString := "5f";
				elsif rxByte == 16#60# then rxString := "60";
				elsif rxByte == 16#61# then rxString := "61";
				elsif rxByte == 16#62# then rxString := "62";
				elsif rxByte == 16#63# then rxString := "63";
				elsif rxByte == 16#64# then rxString := "64";
				elsif rxByte == 16#65# then rxString := "65";
				elsif rxByte == 16#66# then rxString := "66";
				elsif rxByte == 16#67# then rxString := "67";
				elsif rxByte == 16#68# then rxString := "68";
				elsif rxByte == 16#69# then rxString := "69";
				elsif rxByte == 16#6a# then rxString := "6a";
				elsif rxByte == 16#6b# then rxString := "6b";
				elsif rxByte == 16#6c# then rxString := "6c";
				elsif rxByte == 16#6d# then rxString := "6d";
				elsif rxByte == 16#6e# then rxString := "6e";
				elsif rxByte == 16#6f# then rxString := "6f";
				elsif rxByte == 16#70# then rxString := "70";
				elsif rxByte == 16#71# then rxString := "71";
				elsif rxByte == 16#72# then rxString := "72";
				elsif rxByte == 16#73# then rxString := "73";
				elsif rxByte == 16#74# then rxString := "74";
				elsif rxByte == 16#75# then rxString := "75";
				elsif rxByte == 16#76# then rxString := "76";
				elsif rxByte == 16#77# then rxString := "77";
				elsif rxByte == 16#78# then rxString := "78";
				elsif rxByte == 16#79# then rxString := "79";
				elsif rxByte == 16#7a# then rxString := "7a";
				elsif rxByte == 16#7b# then rxString := "7b";
				elsif rxByte == 16#7c# then rxString := "7c";
				elsif rxByte == 16#7d# then rxString := "7d";
				elsif rxByte == 16#7e# then rxString := "7e";
				elsif rxByte == 16#7f# then rxString := "7f";
				elsif rxByte == 16#80# then rxString := "80";
				elsif rxByte == 16#81# then rxString := "81";
				elsif rxByte == 16#82# then rxString := "82";
				elsif rxByte == 16#83# then rxString := "83";
				elsif rxByte == 16#84# then rxString := "84";
				elsif rxByte == 16#85# then rxString := "85";
				elsif rxByte == 16#86# then rxString := "86";
				elsif rxByte == 16#87# then rxString := "87";
				elsif rxByte == 16#88# then rxString := "88";
				elsif rxByte == 16#89# then rxString := "89";
				elsif rxByte == 16#8a# then rxString := "8a";
				elsif rxByte == 16#8b# then rxString := "8b";
				elsif rxByte == 16#8c# then rxString := "8c";
				elsif rxByte == 16#8d# then rxString := "8d";
				elsif rxByte == 16#8e# then rxString := "8e";
				elsif rxByte == 16#8f# then rxString := "8f";
				elsif rxByte == 16#90# then rxString := "90";
				elsif rxByte == 16#91# then rxString := "91";
				elsif rxByte == 16#92# then rxString := "92";
				elsif rxByte == 16#93# then rxString := "93";
				elsif rxByte == 16#94# then rxString := "94";
				elsif rxByte == 16#95# then rxString := "95";
				elsif rxByte == 16#96# then rxString := "96";
				elsif rxByte == 16#97# then rxString := "97";
				elsif rxByte == 16#98# then rxString := "98";
				elsif rxByte == 16#99# then rxString := "99";
				elsif rxByte == 16#9a# then rxString := "9a";
				elsif rxByte == 16#9b# then rxString := "9b";
				elsif rxByte == 16#9c# then rxString := "9c";
				elsif rxByte == 16#9d# then rxString := "9d";
				elsif rxByte == 16#9e# then rxString := "9e";
				elsif rxByte == 16#9f# then rxString := "9f";
				elsif rxByte == 16#a0# then rxString := "a0";
				elsif rxByte == 16#a1# then rxString := "a1";
				elsif rxByte == 16#a2# then rxString := "a2";
				elsif rxByte == 16#a3# then rxString := "a3";
				elsif rxByte == 16#a4# then rxString := "a4";
				elsif rxByte == 16#a5# then rxString := "a5";
				elsif rxByte == 16#a6# then rxString := "a6";
				elsif rxByte == 16#a7# then rxString := "a7";
				elsif rxByte == 16#a8# then rxString := "a8";
				elsif rxByte == 16#a9# then rxString := "a9";
				elsif rxByte == 16#aa# then rxString := "aa";
				elsif rxByte == 16#ab# then rxString := "ab";
				elsif rxByte == 16#ac# then rxString := "ac";
				elsif rxByte == 16#ad# then rxString := "ad";
				elsif rxByte == 16#ae# then rxString := "ae";
				elsif rxByte == 16#af# then rxString := "af";
				elsif rxByte == 16#b0# then rxString := "b0";
				elsif rxByte == 16#b1# then rxString := "b1";
				elsif rxByte == 16#b2# then rxString := "b2";
				elsif rxByte == 16#b3# then rxString := "b3";
				elsif rxByte == 16#b4# then rxString := "b4";
				elsif rxByte == 16#b5# then rxString := "b5";
				elsif rxByte == 16#b6# then rxString := "b6";
				elsif rxByte == 16#b7# then rxString := "b7";
				elsif rxByte == 16#b8# then rxString := "b8";
				elsif rxByte == 16#b9# then rxString := "b9";
				elsif rxByte == 16#ba# then rxString := "ba";
				elsif rxByte == 16#bb# then rxString := "bb";
				elsif rxByte == 16#bc# then rxString := "bc";
				elsif rxByte == 16#bd# then rxString := "bd";
				elsif rxByte == 16#be# then rxString := "be";
				elsif rxByte == 16#bf# then rxString := "bf";
				elsif rxByte == 16#c0# then rxString := "c0";
				elsif rxByte == 16#c1# then rxString := "c1";
				elsif rxByte == 16#c2# then rxString := "c2";
				elsif rxByte == 16#c3# then rxString := "c3";
				elsif rxByte == 16#c4# then rxString := "c4";
				elsif rxByte == 16#c5# then rxString := "c5";
				elsif rxByte == 16#c6# then rxString := "c6";
				elsif rxByte == 16#c7# then rxString := "c7";
				elsif rxByte == 16#c8# then rxString := "c8";
				elsif rxByte == 16#c9# then rxString := "c9";
				elsif rxByte == 16#ca# then rxString := "ca";
				elsif rxByte == 16#cb# then rxString := "cb";
				elsif rxByte == 16#cc# then rxString := "cc";
				elsif rxByte == 16#cd# then rxString := "cd";
				elsif rxByte == 16#ce# then rxString := "ce";
				elsif rxByte == 16#cf# then rxString := "cf";
				elsif rxByte == 16#d0# then rxString := "d0";
				elsif rxByte == 16#d1# then rxString := "d1";
				elsif rxByte == 16#d2# then rxString := "d2";
				elsif rxByte == 16#d3# then rxString := "d3";
				elsif rxByte == 16#d4# then rxString := "d4";
				elsif rxByte == 16#d5# then rxString := "d5";
				elsif rxByte == 16#d6# then rxString := "d6";
				elsif rxByte == 16#d7# then rxString := "d7";
				elsif rxByte == 16#d8# then rxString := "d8";
				elsif rxByte == 16#d9# then rxString := "d9";
				elsif rxByte == 16#da# then rxString := "da";
				elsif rxByte == 16#db# then rxString := "db";
				elsif rxByte == 16#dc# then rxString := "dc";
				elsif rxByte == 16#dd# then rxString := "dd";
				elsif rxByte == 16#de# then rxString := "de";
				elsif rxByte == 16#df# then rxString := "df";
				elsif rxByte == 16#e0# then rxString := "e0";
				elsif rxByte == 16#e1# then rxString := "e1";
				elsif rxByte == 16#e2# then rxString := "e2";
				elsif rxByte == 16#e3# then rxString := "e3";
				elsif rxByte == 16#e4# then rxString := "e4";
				elsif rxByte == 16#e5# then rxString := "e5";
				elsif rxByte == 16#e6# then rxString := "e6";
				elsif rxByte == 16#e7# then rxString := "e7";
				elsif rxByte == 16#e8# then rxString := "e8";
				elsif rxByte == 16#e9# then rxString := "e9";
				elsif rxByte == 16#ea# then rxString := "ea";
				elsif rxByte == 16#eb# then rxString := "eb";
				elsif rxByte == 16#ec# then rxString := "ec";
				elsif rxByte == 16#ed# then rxString := "ed";
				elsif rxByte == 16#ee# then rxString := "ee";
				elsif rxByte == 16#ef# then rxString := "ef";
				elsif rxByte == 16#f0# then rxString := "f0";
				elsif rxByte == 16#f1# then rxString := "f1";
				elsif rxByte == 16#f2# then rxString := "f2";
				elsif rxByte == 16#f3# then rxString := "f3";
				elsif rxByte == 16#f4# then rxString := "f4";
				elsif rxByte == 16#f5# then rxString := "f5";
				elsif rxByte == 16#f6# then rxString := "f6";
				elsif rxByte == 16#f7# then rxString := "f7";
				elsif rxByte == 16#f8# then rxString := "f8";
				elsif rxByte == 16#f9# then rxString := "f9";
				elsif rxByte == 16#fa# then rxString := "fa";
				elsif rxByte == 16#fb# then rxString := "fb";
				elsif rxByte == 16#fc# then rxString := "fc";
				elsif rxByte == 16#fd# then rxString := "fd";
				elsif rxByte == 16#fe# then rxString := "fe";
				else
					rxString := "ff";
				end if;

				packetin(rxString, RC1REG, true);
				wait for byteTransmissionTime;
			end loop;
		end loop;
	end process;

	deviceToHostTransmission: process is
		variable txByte : integer;
		variable txString : string;
	begin
		loop
			wait on TX1REG;
			txByte := TX1REG;
			if TX1STA.TXEN == '1' then
				report("[FAKE UART1] Transmit byte from device to host");

				if txByte == 16#00# then txString := "00";
				elsif txByte == 16#01# then txString := "01";
				elsif txByte == 16#02# then txString := "02";
				elsif txByte == 16#03# then txString := "03";
				elsif txByte == 16#04# then txString := "04";
				elsif txByte == 16#05# then txString := "05";
				elsif txByte == 16#06# then txString := "06";
				elsif txByte == 16#07# then txString := "07";
				elsif txByte == 16#08# then txString := "08";
				elsif txByte == 16#09# then txString := "09";
				elsif txByte == 16#0a# then txString := "0a";
				elsif txByte == 16#0b# then txString := "0b";
				elsif txByte == 16#0c# then txString := "0c";
				elsif txByte == 16#0d# then txString := "0d";
				elsif txByte == 16#0e# then txString := "0e";
				elsif txByte == 16#0f# then txString := "0f";
				elsif txByte == 16#10# then txString := "10";
				elsif txByte == 16#11# then txString := "11";
				elsif txByte == 16#12# then txString := "12";
				elsif txByte == 16#13# then txString := "13";
				elsif txByte == 16#14# then txString := "14";
				elsif txByte == 16#15# then txString := "15";
				elsif txByte == 16#16# then txString := "16";
				elsif txByte == 16#17# then txString := "17";
				elsif txByte == 16#18# then txString := "18";
				elsif txByte == 16#19# then txString := "19";
				elsif txByte == 16#1a# then txString := "1a";
				elsif txByte == 16#1b# then txString := "1b";
				elsif txByte == 16#1c# then txString := "1c";
				elsif txByte == 16#1d# then txString := "1d";
				elsif txByte == 16#1e# then txString := "1e";
				elsif txByte == 16#1f# then txString := "1f";
				elsif txByte == 16#20# then txString := "20";
				elsif txByte == 16#21# then txString := "21";
				elsif txByte == 16#22# then txString := "22";
				elsif txByte == 16#23# then txString := "23";
				elsif txByte == 16#24# then txString := "24";
				elsif txByte == 16#25# then txString := "25";
				elsif txByte == 16#26# then txString := "26";
				elsif txByte == 16#27# then txString := "27";
				elsif txByte == 16#28# then txString := "28";
				elsif txByte == 16#29# then txString := "29";
				elsif txByte == 16#2a# then txString := "2a";
				elsif txByte == 16#2b# then txString := "2b";
				elsif txByte == 16#2c# then txString := "2c";
				elsif txByte == 16#2d# then txString := "2d";
				elsif txByte == 16#2e# then txString := "2e";
				elsif txByte == 16#2f# then txString := "2f";
				elsif txByte == 16#30# then txString := "30";
				elsif txByte == 16#31# then txString := "31";
				elsif txByte == 16#32# then txString := "32";
				elsif txByte == 16#33# then txString := "33";
				elsif txByte == 16#34# then txString := "34";
				elsif txByte == 16#35# then txString := "35";
				elsif txByte == 16#36# then txString := "36";
				elsif txByte == 16#37# then txString := "37";
				elsif txByte == 16#38# then txString := "38";
				elsif txByte == 16#39# then txString := "39";
				elsif txByte == 16#3a# then txString := "3a";
				elsif txByte == 16#3b# then txString := "3b";
				elsif txByte == 16#3c# then txString := "3c";
				elsif txByte == 16#3d# then txString := "3d";
				elsif txByte == 16#3e# then txString := "3e";
				elsif txByte == 16#3f# then txString := "3f";
				elsif txByte == 16#40# then txString := "40";
				elsif txByte == 16#41# then txString := "41";
				elsif txByte == 16#42# then txString := "42";
				elsif txByte == 16#43# then txString := "43";
				elsif txByte == 16#44# then txString := "44";
				elsif txByte == 16#45# then txString := "45";
				elsif txByte == 16#46# then txString := "46";
				elsif txByte == 16#47# then txString := "47";
				elsif txByte == 16#48# then txString := "48";
				elsif txByte == 16#49# then txString := "49";
				elsif txByte == 16#4a# then txString := "4a";
				elsif txByte == 16#4b# then txString := "4b";
				elsif txByte == 16#4c# then txString := "4c";
				elsif txByte == 16#4d# then txString := "4d";
				elsif txByte == 16#4e# then txString := "4e";
				elsif txByte == 16#4f# then txString := "4f";
				elsif txByte == 16#50# then txString := "50";
				elsif txByte == 16#51# then txString := "51";
				elsif txByte == 16#52# then txString := "52";
				elsif txByte == 16#53# then txString := "53";
				elsif txByte == 16#54# then txString := "54";
				elsif txByte == 16#55# then txString := "55";
				elsif txByte == 16#56# then txString := "56";
				elsif txByte == 16#57# then txString := "57";
				elsif txByte == 16#58# then txString := "58";
				elsif txByte == 16#59# then txString := "59";
				elsif txByte == 16#5a# then txString := "5a";
				elsif txByte == 16#5b# then txString := "5b";
				elsif txByte == 16#5c# then txString := "5c";
				elsif txByte == 16#5d# then txString := "5d";
				elsif txByte == 16#5e# then txString := "5e";
				elsif txByte == 16#5f# then txString := "5f";
				elsif txByte == 16#60# then txString := "60";
				elsif txByte == 16#61# then txString := "61";
				elsif txByte == 16#62# then txString := "62";
				elsif txByte == 16#63# then txString := "63";
				elsif txByte == 16#64# then txString := "64";
				elsif txByte == 16#65# then txString := "65";
				elsif txByte == 16#66# then txString := "66";
				elsif txByte == 16#67# then txString := "67";
				elsif txByte == 16#68# then txString := "68";
				elsif txByte == 16#69# then txString := "69";
				elsif txByte == 16#6a# then txString := "6a";
				elsif txByte == 16#6b# then txString := "6b";
				elsif txByte == 16#6c# then txString := "6c";
				elsif txByte == 16#6d# then txString := "6d";
				elsif txByte == 16#6e# then txString := "6e";
				elsif txByte == 16#6f# then txString := "6f";
				elsif txByte == 16#70# then txString := "70";
				elsif txByte == 16#71# then txString := "71";
				elsif txByte == 16#72# then txString := "72";
				elsif txByte == 16#73# then txString := "73";
				elsif txByte == 16#74# then txString := "74";
				elsif txByte == 16#75# then txString := "75";
				elsif txByte == 16#76# then txString := "76";
				elsif txByte == 16#77# then txString := "77";
				elsif txByte == 16#78# then txString := "78";
				elsif txByte == 16#79# then txString := "79";
				elsif txByte == 16#7a# then txString := "7a";
				elsif txByte == 16#7b# then txString := "7b";
				elsif txByte == 16#7c# then txString := "7c";
				elsif txByte == 16#7d# then txString := "7d";
				elsif txByte == 16#7e# then txString := "7e";
				elsif txByte == 16#7f# then txString := "7f";
				elsif txByte == 16#80# then txString := "80";
				elsif txByte == 16#81# then txString := "81";
				elsif txByte == 16#82# then txString := "82";
				elsif txByte == 16#83# then txString := "83";
				elsif txByte == 16#84# then txString := "84";
				elsif txByte == 16#85# then txString := "85";
				elsif txByte == 16#86# then txString := "86";
				elsif txByte == 16#87# then txString := "87";
				elsif txByte == 16#88# then txString := "88";
				elsif txByte == 16#89# then txString := "89";
				elsif txByte == 16#8a# then txString := "8a";
				elsif txByte == 16#8b# then txString := "8b";
				elsif txByte == 16#8c# then txString := "8c";
				elsif txByte == 16#8d# then txString := "8d";
				elsif txByte == 16#8e# then txString := "8e";
				elsif txByte == 16#8f# then txString := "8f";
				elsif txByte == 16#90# then txString := "90";
				elsif txByte == 16#91# then txString := "91";
				elsif txByte == 16#92# then txString := "92";
				elsif txByte == 16#93# then txString := "93";
				elsif txByte == 16#94# then txString := "94";
				elsif txByte == 16#95# then txString := "95";
				elsif txByte == 16#96# then txString := "96";
				elsif txByte == 16#97# then txString := "97";
				elsif txByte == 16#98# then txString := "98";
				elsif txByte == 16#99# then txString := "99";
				elsif txByte == 16#9a# then txString := "9a";
				elsif txByte == 16#9b# then txString := "9b";
				elsif txByte == 16#9c# then txString := "9c";
				elsif txByte == 16#9d# then txString := "9d";
				elsif txByte == 16#9e# then txString := "9e";
				elsif txByte == 16#9f# then txString := "9f";
				elsif txByte == 16#a0# then txString := "a0";
				elsif txByte == 16#a1# then txString := "a1";
				elsif txByte == 16#a2# then txString := "a2";
				elsif txByte == 16#a3# then txString := "a3";
				elsif txByte == 16#a4# then txString := "a4";
				elsif txByte == 16#a5# then txString := "a5";
				elsif txByte == 16#a6# then txString := "a6";
				elsif txByte == 16#a7# then txString := "a7";
				elsif txByte == 16#a8# then txString := "a8";
				elsif txByte == 16#a9# then txString := "a9";
				elsif txByte == 16#aa# then txString := "aa";
				elsif txByte == 16#ab# then txString := "ab";
				elsif txByte == 16#ac# then txString := "ac";
				elsif txByte == 16#ad# then txString := "ad";
				elsif txByte == 16#ae# then txString := "ae";
				elsif txByte == 16#af# then txString := "af";
				elsif txByte == 16#b0# then txString := "b0";
				elsif txByte == 16#b1# then txString := "b1";
				elsif txByte == 16#b2# then txString := "b2";
				elsif txByte == 16#b3# then txString := "b3";
				elsif txByte == 16#b4# then txString := "b4";
				elsif txByte == 16#b5# then txString := "b5";
				elsif txByte == 16#b6# then txString := "b6";
				elsif txByte == 16#b7# then txString := "b7";
				elsif txByte == 16#b8# then txString := "b8";
				elsif txByte == 16#b9# then txString := "b9";
				elsif txByte == 16#ba# then txString := "ba";
				elsif txByte == 16#bb# then txString := "bb";
				elsif txByte == 16#bc# then txString := "bc";
				elsif txByte == 16#bd# then txString := "bd";
				elsif txByte == 16#be# then txString := "be";
				elsif txByte == 16#bf# then txString := "bf";
				elsif txByte == 16#c0# then txString := "c0";
				elsif txByte == 16#c1# then txString := "c1";
				elsif txByte == 16#c2# then txString := "c2";
				elsif txByte == 16#c3# then txString := "c3";
				elsif txByte == 16#c4# then txString := "c4";
				elsif txByte == 16#c5# then txString := "c5";
				elsif txByte == 16#c6# then txString := "c6";
				elsif txByte == 16#c7# then txString := "c7";
				elsif txByte == 16#c8# then txString := "c8";
				elsif txByte == 16#c9# then txString := "c9";
				elsif txByte == 16#ca# then txString := "ca";
				elsif txByte == 16#cb# then txString := "cb";
				elsif txByte == 16#cc# then txString := "cc";
				elsif txByte == 16#cd# then txString := "cd";
				elsif txByte == 16#ce# then txString := "ce";
				elsif txByte == 16#cf# then txString := "cf";
				elsif txByte == 16#d0# then txString := "d0";
				elsif txByte == 16#d1# then txString := "d1";
				elsif txByte == 16#d2# then txString := "d2";
				elsif txByte == 16#d3# then txString := "d3";
				elsif txByte == 16#d4# then txString := "d4";
				elsif txByte == 16#d5# then txString := "d5";
				elsif txByte == 16#d6# then txString := "d6";
				elsif txByte == 16#d7# then txString := "d7";
				elsif txByte == 16#d8# then txString := "d8";
				elsif txByte == 16#d9# then txString := "d9";
				elsif txByte == 16#da# then txString := "da";
				elsif txByte == 16#db# then txString := "db";
				elsif txByte == 16#dc# then txString := "dc";
				elsif txByte == 16#dd# then txString := "dd";
				elsif txByte == 16#de# then txString := "de";
				elsif txByte == 16#df# then txString := "df";
				elsif txByte == 16#e0# then txString := "e0";
				elsif txByte == 16#e1# then txString := "e1";
				elsif txByte == 16#e2# then txString := "e2";
				elsif txByte == 16#e3# then txString := "e3";
				elsif txByte == 16#e4# then txString := "e4";
				elsif txByte == 16#e5# then txString := "e5";
				elsif txByte == 16#e6# then txString := "e6";
				elsif txByte == 16#e7# then txString := "e7";
				elsif txByte == 16#e8# then txString := "e8";
				elsif txByte == 16#e9# then txString := "e9";
				elsif txByte == 16#ea# then txString := "ea";
				elsif txByte == 16#eb# then txString := "eb";
				elsif txByte == 16#ec# then txString := "ec";
				elsif txByte == 16#ed# then txString := "ed";
				elsif txByte == 16#ee# then txString := "ee";
				elsif txByte == 16#ef# then txString := "ef";
				elsif txByte == 16#f0# then txString := "f0";
				elsif txByte == 16#f1# then txString := "f1";
				elsif txByte == 16#f2# then txString := "f2";
				elsif txByte == 16#f3# then txString := "f3";
				elsif txByte == 16#f4# then txString := "f4";
				elsif txByte == 16#f5# then txString := "f5";
				elsif txByte == 16#f6# then txString := "f6";
				elsif txByte == 16#f7# then txString := "f7";
				elsif txByte == 16#f8# then txString := "f8";
				elsif txByte == 16#f9# then txString := "f9";
				elsif txByte == 16#fa# then txString := "fa";
				elsif txByte == 16#fb# then txString := "fb";
				elsif txByte == 16#fc# then txString := "fc";
				elsif txByte == 16#fd# then txString := "fd";
				elsif txByte == 16#fe# then txString := "fe";
				else
					txString := "ff";
				end if;

				if RC1STA.SREN == '1' then
					report("[FAKE UART1] Echoing device-to-host transmitted byte (single reception)");
					packetin(txString, RC1REG, false);
					wait for byteTransmissionTime;
				elsif RC1STA.CREN == '1' then
					report("[FAKE UART1] Echoing device-to-host transmitted byte (continuous reception)");
					packetin(txString, RC1REG, false);
					wait for byteTransmissionTime;
				else
					report("[FAKE UART1] Not echoing device-to-host transmitted byte (receiver not ready)");
				end if;

				if deviceToHostNumberOfBytes == 0 then
					deviceToHostByte0 := txByte;
				elsif deviceToHostNumberOfBytes == 1 then
					deviceToHostByte1 := txByte;
				elsif deviceToHostNumberOfBytes == 2 then
					deviceToHostByte2 := txByte;
				elsif deviceToHostNumberOfBytes == 3 then
					deviceToHostByte3 := txByte;
				elsif deviceToHostNumberOfBytes == 4 then
					deviceToHostByte4 := txByte;
				elsif deviceToHostNumberOfBytes == 5 then
					deviceToHostByte5 := txByte;
				elsif deviceToHostNumberOfBytes == 6 then
					deviceToHostByte6 := txByte;
				elsif deviceToHostNumberOfBytes == 7 then
					deviceToHostByte7 := txByte;
				elsif deviceToHostNumberOfBytes == 8 then
					deviceToHostByte8 := txByte;
				elsif deviceToHostNumberOfBytes == 9 then
					deviceToHostByte9 := txByte;
				elsif deviceToHostNumberOfBytes == 10 then
					deviceToHostByte10 := txByte;
				elsif deviceToHostNumberOfBytes == 11 then
					deviceToHostByte11 := txByte;
				elsif deviceToHostNumberOfBytes == 12 then
					deviceToHostByte12 := txByte;
				elsif deviceToHostNumberOfBytes == 13 then
					deviceToHostByte13 := txByte;
				elsif deviceToHostNumberOfBytes == 14 then
					deviceToHostByte14 := txByte;
				elsif deviceToHostNumberOfBytes == 15 then
					deviceToHostByte15 := txByte;
				else
					report("[FAKE UART1 ASSERT] Transmitted byte to host exceeds fixture's buffer space !");
					fakeUart1IsSessionInvalid := 1;
				end if;
				deviceToHostNumberOfBytes := deviceToHostNumberOfBytes + 1;
			else
				report("[FAKE UART1] Attempted to transmit byte from device to host whilst !TXEN");
			end if;
		end loop;
	end process;

	assertOverrunAndFramingErrors: process is
	begin
		loop
			wait on RC1STA;

			if RC1STA.FERR == '1' then
				report("[FAKE UART1 ASSERT] Framing Error !");
				fakeUart1IsSessionInvalid := 1;
			end if;

			if RC1STA.OERR == '1' then
				report("[FAKE UART1 ASSERT] Overrun Error !");
				fakeUart1IsSessionInvalid := 1;
			end if;
		end loop;
	end process;
end testbench;
