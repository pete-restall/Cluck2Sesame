configuration for "PIC16F15356" is
	shared variable fakeLcdSessionIndex;
	shared variable fakeLcdIsSessionInvalid;
	shared variable fakeLcdInitialFunctionSetCount;
	shared variable fakeLcdIsConfigured;
	shared variable fakeLcdIsNybbleMode;
	shared variable fakeLcdRs;
	shared variable fakeLcdData;
	shared variable fakeLcdClocked;
	shared variable fakeLcdCommand;
	shared variable fakeLcdBusyFlag;
	shared variable fakeLcdCommandIndex;
	shared variable fakeLcdRegFunction;
	shared variable fakeLcdRegDisplay;
	shared variable fakeLcdRegEntryMode;
	shared variable fakeLcdRegDdramAddress;
	shared variable fakeLcdDdramAddressIncrement;

	shared variable fakeLcdDram0_0;
	shared variable fakeLcdDram0_1;
	shared variable fakeLcdDram0_2;
	shared variable fakeLcdDram0_3;
	shared variable fakeLcdDram0_4;
	shared variable fakeLcdDram0_5;
	shared variable fakeLcdDram0_6;
	shared variable fakeLcdDram0_7;
	shared variable fakeLcdDram0_8;
	shared variable fakeLcdDram0_9;
	shared variable fakeLcdDram0_10;
	shared variable fakeLcdDram0_11;
	shared variable fakeLcdDram0_12;
	shared variable fakeLcdDram0_13;
	shared variable fakeLcdDram0_14;
	shared variable fakeLcdDram0_15;

	shared variable fakeLcdDram1_0;
	shared variable fakeLcdDram1_1;
	shared variable fakeLcdDram1_2;
	shared variable fakeLcdDram1_3;
	shared variable fakeLcdDram1_4;
	shared variable fakeLcdDram1_5;
	shared variable fakeLcdDram1_6;
	shared variable fakeLcdDram1_7;
	shared variable fakeLcdDram1_8;
	shared variable fakeLcdDram1_9;
	shared variable fakeLcdDram1_10;
	shared variable fakeLcdDram1_11;
	shared variable fakeLcdDram1_12;
	shared variable fakeLcdDram1_13;
	shared variable fakeLcdDram1_14;
	shared variable fakeLcdDram1_15;
end configuration;

testbench for "PIC16F15356" is
begin
	resetFixture: process is
	begin
		fakeLcdBusyFlag := 0;
		loop
			wait on fakeLcdSessionIndex;
			report("[FAKE LCD] Resetting fixture.");
			fakeLcdIsSessionInvalid := 0;
			fakeLcdInitialFunctionSetCount := 0;
			fakeLcdIsNybbleMode := 0;
			fakeLcdRs := 0;
			fakeLcdData := 0;
			fakeLcdRegFunction := 0;
			fakeLcdRegDisplay := 0;
			fakeLcdRegEntryMode := 0;
			fakeLcdDdramAddressIncrement := 0;
		end loop;
	end process;

	isConfiguredMonitor: process is
	begin
		loop
			wait on fakeLcdInitialFunctionSetCount;
			if fakeLcdInitialFunctionSetCount >= 3 then
				report("[FAKE LCD] Unambiguously configured (8-bit mode)");
				fakeLcdIsConfigured := 1;
			else
				fakeLcdIsConfigured := 0;
			end if;
		end loop;
	end process;

	lcdPinCapture: process is
	begin
		loop
			wait on RA4;
			if RA4 == '0' then
				report("[FAKE LCD] Received bus strobe:");
				if RA3 == '0' then
					report("[FAKE LCD]     RS=0 (command)");
					fakeLcdRs := 0;
				else
					report("[FAKE LCD]     RS=1 (data)");
					fakeLcdRs := 1;
				end if;

				fakeLcdData := 0;
				if RC4 != '0' then
					fakeLcdData := fakeLcdData + 128;
				end if;
				if RA6 != '0' then
					fakeLcdData := fakeLcdData + 64;
				end if;
				if RA7 != '0' then
					fakeLcdData := fakeLcdData + 32;
				end if;
				if RA5 != '0' then
					fakeLcdData := fakeLcdData + 16;
				end if;

				if fakeLcdBusyFlag != 0 then
					report("[FAKE LCD ASSERT] Busy flag must be clear before new bytes are sent !");
					fakeLcdIsSessionInvalid := 1;
				elsif fakeLcdClocked == 0 then
					fakeLcdClocked := 1;
				else
					fakeLcdClocked := 0;
				end if;
			end if;
		end loop;
	end process;

	lcdCommandCapture: process is
		variable isHighNybble : boolean;
		variable someRandomHackToStopIndexOutOfRange : integer;
	begin
		isHighNybble := true;
		loop
			wait on fakeLcdClocked;
			if fakeLcdIsNybbleMode != 0 then
				if isHighNybble then
					report("[FAKE LCD]     State=HIGH NYBBLE");
					fakeLcdCommand := fakeLcdData;
					isHighNybble := false;
				else
					report("[FAKE LCD]     State=LOW NYBBLE");
					fakeLcdCommand := fakeLcdCommand + fakeLcdData / 16;
					fakeLcdCommandIndex := fakeLcdCommandIndex + 1;
					isHighNybble := true;
					fakeLcdBusyFlag := 1;
				end if;
			else
				report("[FAKE LCD]     State=BYTE");
				fakeLcdCommand := fakeLcdData;
				fakeLcdCommandIndex := fakeLcdCommandIndex + 1;
				isHighNybble := true;
				fakeLcdBusyFlag := 1;
			end if;
			someRandomHackToStopIndexOutOfRange := 666;
		end loop;
	end process;

	lcdCommandFunctionSet: process is
		variable lastInitialFunctionSetCommandIndex : integer;
	begin
		lastInitialFunctionSetCommandIndex := 0;
		loop
			wait on fakeLcdCommandIndex;
			if fakeLcdRs == 0 then
				if fakeLcdCommand / 16 == 2#0010# then
					report("[FAKE LCD]     Command=FUNCTION SET");
					report("[FAKE LCD]         Mode=NYBBLE");
					if fakeLcdIsConfigured != 0 then
						report("[FAKE LCD]         Busy time=40us+10%");
						wait for 44 us;
					else
						report("[FAKE LCD]         Busy time=5ms+10%");
						wait for 5500 us;
					end if;
					fakeLcdIsNybbleMode := 1;
					fakeLcdRegFunction := fakeLcdCommand;
					fakeLcdBusyFlag := 0;
				elsif fakeLcdCommand / 16 == 2#0011# then
					report("[FAKE LCD]     Command=FUNCTION SET");
					report("[FAKE LCD]         Mode=BYTE");
					fakeLcdIsNybbleMode := 0;
					if fakeLcdIsConfigured != 0 then
						report("[FAKE LCD]         Busy time=40us+10%");
						wait for 44 us;
					else
						report("[FAKE LCD]         Busy time=5ms+10%");
						if fakeLcdCommandIndex == lastInitialFunctionSetCommandIndex + 1 then
							fakeLcdInitialFunctionSetCount := fakeLcdInitialFunctionSetCount + 1;
						else
							fakeLcdInitialFunctionSetCount := 1;
						end if;
						lastInitialFunctionSetCommandIndex := fakeLcdCommandIndex;
						wait for 5500 us;
					end if;
					fakeLcdIsNybbleMode := 0;
					fakeLcdRegFunction := fakeLcdCommand;
					fakeLcdBusyFlag := 0;
				end if;
			end if;
		end loop;
	end process;

	lcdCommandDisplaySet: process is
		variable displayFlags : integer;
	begin
		loop
			wait on fakeLcdCommandIndex;
			if fakeLcdRs == 0 then
				if fakeLcdCommand / 8 == 2#00001# then
					report("[FAKE LCD]     Command=DISPLAY SET");
					report("[FAKE LCD]         Busy time=40us+10%");

					displayFlags := fakeLcdCommand - 8;
					if displayFlags / 4 == 0 then
						report("[FAKE LCD]         Display=OFF");
					else
						report("[FAKE LCD]         Display=ON");
						displayFlags := displayFlags - 4;
					end if;
					if displayFlags / 2 == 0 then
						report("[FAKE LCD]         Cursor=OFF");
					else
						report("[FAKE LCD]         Cursor=ON");
						displayFlags := displayFlags - 2;
					end if;
					if displayFlags == 0 then
						report("[FAKE LCD]         Blinking=OFF");
					else
						report("[FAKE LCD]         Blinking=ON");
						displayFlags := displayFlags - 1;
					end if;

					wait for 44 us;
					fakeLcdRegDisplay := fakeLcdCommand;
					fakeLcdBusyFlag := 0;
				end if;
			end if;
		end loop;
	end process;

	lcdCommandEntryModeSet: process is
		variable entryModeFlags : integer;
	begin
		loop
			wait on fakeLcdCommandIndex;
			if fakeLcdRs == 0 then
				if fakeLcdCommand / 4 == 2#00000001# then
					report("[FAKE LCD]     Command=ENTRY MODE SET");
					report("[FAKE LCD]         Busy time=40us+10%");

					entryModeFlags := fakeLcdCommand - 4;
					if entryModeFlags / 2 == 0 then
						report("[FAKE LCD]         Address=DECREMENT");
						fakeLcdDdramAddressIncrement := -1;
					else
						report("[FAKE LCD]         Address=INCREMENT");
						fakeLcdDdramAddressIncrement := 1;
						entryModeFlags := entryModeFlags - 2;
					end if;
					if entryModeFlags == 0 then
						report("[FAKE LCD]         Shift=OFF");
					else
						report("[FAKE LCD]         Shift=ON");
						entryModeFlags := entryModeFlags - 1;
					end if;

					wait for 44 us;
					fakeLcdRegEntryMode := fakeLcdCommand;
					fakeLcdBusyFlag := 0;
				end if;
			end if;
		end loop;
	end process;

	lcdCommandDisplayClear: process is
	begin
		loop
			wait on fakeLcdCommandIndex;
			if fakeLcdRs == 0 then
				if fakeLcdCommand == 2#00000001# then
					report("[FAKE LCD]     Command=DISPLAY CLEAR");
					report("[FAKE LCD]         Busy time=2ms+10%");
					wait for 2200 us;

					fakeLcdDram0_0 := 16#20#;
					fakeLcdDram0_1 := 16#20#;
					fakeLcdDram0_2 := 16#20#;
					fakeLcdDram0_3 := 16#20#;
					fakeLcdDram0_4 := 16#20#;
					fakeLcdDram0_5 := 16#20#;
					fakeLcdDram0_6 := 16#20#;
					fakeLcdDram0_7 := 16#20#;
					fakeLcdDram0_8 := 16#20#;
					fakeLcdDram0_9 := 16#20#;
					fakeLcdDram0_10 := 16#20#;
					fakeLcdDram0_11 := 16#20#;
					fakeLcdDram0_12 := 16#20#;
					fakeLcdDram0_13 := 16#20#;
					fakeLcdDram0_14 := 16#20#;
					fakeLcdDram0_15 := 16#20#;

					fakeLcdDram1_0 := 16#20#;
					fakeLcdDram1_1 := 16#20#;
					fakeLcdDram1_2 := 16#20#;
					fakeLcdDram1_3 := 16#20#;
					fakeLcdDram1_4 := 16#20#;
					fakeLcdDram1_5 := 16#20#;
					fakeLcdDram1_6 := 16#20#;
					fakeLcdDram1_7 := 16#20#;
					fakeLcdDram1_8 := 16#20#;
					fakeLcdDram1_9 := 16#20#;
					fakeLcdDram1_10 := 16#20#;
					fakeLcdDram1_11 := 16#20#;
					fakeLcdDram1_12 := 16#20#;
					fakeLcdDram1_13 := 16#20#;
					fakeLcdDram1_14 := 16#20#;
					fakeLcdDram1_15 := 16#20#;

					fakeLcdRegDdramAddress := 0;
					fakeLcdBusyFlag := 0;
				end if;
			end if;
		end loop;
	end process;

	lcdCommandSetDdramAddress: process is
	begin
		loop
			wait on fakeLcdCommandIndex;
			if fakeLcdRs == 0 then
				if fakeLcdCommand > 2#10000000# then
					report("[FAKE LCD]     Command=SET DDRAM ADDRESS");
					report("[FAKE LCD]         Busy time=40us+10%");
					wait for 44us;
					fakeLcdRegDdramAddress := fakeLcdCommand - 128;
					fakeLcdBusyFlag := 0;
				end if;
			end if;
		end loop;
	end process;

	lcdCommandWriteData: process is
	begin
		loop
			wait on fakeLcdCommandIndex;
			if fakeLcdRs == 1 then
				report("[FAKE LCD]     Command=WRITE TO DDRAM");
				report("[FAKE LCD]         Busy time=40us+10%");
				wait for 44 us;

				if fakeLcdRegDdramAddress == 0 then
					fakeLcdDram0_0 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 1 then
					fakeLcdDram0_1 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 2 then
					fakeLcdDram0_2 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 3 then
					fakeLcdDram0_3 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 4 then
					fakeLcdDram0_4 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 5 then
					fakeLcdDram0_5 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 6 then
					fakeLcdDram0_6 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 7 then
					fakeLcdDram0_7 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 8 then
					fakeLcdDram0_8 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 9 then
					fakeLcdDram0_9 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 10 then
					fakeLcdDram0_10 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 11 then
					fakeLcdDram0_11 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 12 then
					fakeLcdDram0_12 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 13 then
					fakeLcdDram0_13 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 14 then
					fakeLcdDram0_14 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 15 then
					fakeLcdDram0_15 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 64 then
					fakeLcdDram1_0 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 65 then
					fakeLcdDram1_1 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 66 then
					fakeLcdDram1_2 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 67 then
					fakeLcdDram1_3 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 68 then
					fakeLcdDram1_4 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 69 then
					fakeLcdDram1_5 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 70 then
					fakeLcdDram1_6 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 71 then
					fakeLcdDram1_7 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 72 then
					fakeLcdDram1_8 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 73 then
					fakeLcdDram1_9 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 74 then
					fakeLcdDram1_10 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 75 then
					fakeLcdDram1_11 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 76 then
					fakeLcdDram1_12 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 77 then
					fakeLcdDram1_13 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 78 then
					fakeLcdDram1_14 := fakeLcdCommand;
				elsif fakeLcdRegDdramAddress == 79 then
					fakeLcdDram1_15 := fakeLcdCommand;
				else
					fakeLcdIsSessionInvalid := 1;
					report("[FAKE LCD ASSERT] Written to invalid DDRAM address !");
				end if;

				if fakeLcdIsSessionInvalid == 0 then
					fakeLcdRegDdramAddress := fakeLcdRegDdramAddress + fakeLcdDdramAddressIncrement;
				end if;
				fakeLcdBusyFlag := 0;
			end if;
		end loop;
	end process;

	assertPowerOnToEnableIsMoreThan40Milliseconds: process is
		variable powerOnTime : cycle;
		variable cyclesIn44ms : cycle;
		variable powerOnMonitoring : boolean;
		variable someRandomHackToStopIndexOutOfRange2 : integer;
	begin
		cyclesIn44ms := 352000 ic;
		loop
			report("[FAKE LCD] Waiting for Power Changes.");
			wait on RB2;
			if RB2 == '1' then
				report("[FAKE LCD] Power On.  Monitoring time is 40ms+10%.");
				powerOnTime := now();
				powerOnMonitoring := true;
				while powerOnMonitoring loop
					if RA4 == '0' then
						wait on RA4 for 1000 ic;
						if (now() >= powerOnTime + cyclesIn44ms) then
							powerOnMonitoring := false;
						end if;
					end if;

					if RA4 == '1' then
						powerOnMonitoring := false;
					end if;
				end loop;

				if (now() < powerOnTime + cyclesIn44ms) then
					fakeLcdIsSessionInvalid := 1;
					report("[FAKE LCD ASSERT] EN should be low for 40ms+10% after power on !");
				else
					report("[FAKE LCD] Power-On Monitoring Finished.");
				end if;
			else
				report("[FAKE LCD] Power Off.");
			end if;
			someRandomHackToStopIndexOutOfRange2 := 666;
		end loop;
	end process;

	assertRsOnlyChangesWhenEnableIsHigh: process is
	begin
		loop
			wait on RA3;
			if RB2 == '1' then
				if RA4 == '0' then
					wait for 100 us;
					if RB2 == '1' then
						report("[FAKE LCD ASSERT] RS changed state while EN was low !");
						fakeLcdIsSessionInvalid := 1;
					elsif RA3 == '1' then
						report("[FAKE LCD ASSERT] RS changed state (set high) while EN was low and remained so after LCD was powered down !");
						fakeLcdIsSessionInvalid := 1;
					else
						report("[FAKE LCD GLITCH] RS changed state while EN was low, but LCD powered down shortly thereafter.");
					end if;
				end if;
			end if;
		end loop;
	end process;

	assertDb7OnlyChangesWhenEnableIsHigh: process is
	begin
		loop
			wait on RC4;
			if RB2 == '1' then
				if RA4 == '0' then
					wait for 100 us;
					if RB2 == '1' then
						report("[FAKE LCD ASSERT] DB7 changed state while EN was low !");
						fakeLcdIsSessionInvalid := 1;
					elsif RC4 == '1' then
						report("[FAKE LCD ASSERT] DB7 changed state (set high) while EN was low and remained so after LCD was powered down !");
						fakeLcdIsSessionInvalid := 1;
					else
						report("[FAKE LCD GLITCH] DB7 changed state while EN was low, but LCD powered down shortly thereafter.");
					end if;
				end if;
			end if;
		end loop;
	end process;

	assertDb6OnlyChangesWhenEnableIsHigh: process is
	begin
		loop
			wait on RA6;
			if RB2 == '1' then
				if RA4 == '0' then
					wait for 100 us;
					if RB2 == '1' then
						report("[FAKE LCD ASSERT] DB6 changed state while EN was low !");
						fakeLcdIsSessionInvalid := 1;
					elsif RA6 == '1' then
						report("[FAKE LCD ASSERT] DB6 changed state (set high) while EN was low and remained so after LCD was powered down !");
						fakeLcdIsSessionInvalid := 1;
					else
						report("[FAKE LCD GLITCH] DB6 changed state while EN was low, but LCD powered down shortly thereafter.");
					end if;
				end if;
			end if;
		end loop;
	end process;

	assertDb5OnlyChangesWhenEnableIsHigh: process is
	begin
		loop
			wait on RA7;
			if RB2 == '1' then
				if RA4 == '0' then
					wait for 100 us;
					if RB2 == '1' then
						report("[FAKE LCD ASSERT] DB5 changed state while EN was low !");
						fakeLcdIsSessionInvalid := 1;
					elsif RA7 == '1' then
						report("[FAKE LCD ASSERT] DB5 changed state (set high) while EN was low and remained so after LCD was powered down !");
						fakeLcdIsSessionInvalid := 1;
					else
						report("[FAKE LCD GLITCH] DB5 changed state while EN was low, but LCD powered down shortly thereafter.");
					end if;
				end if;
			end if;
		end loop;
	end process;

	assertDb4OnlyChangesWhenEnableIsHigh: process is
	begin
		loop
			wait on RA5;
			if RB2 == '1' then
				if RA4 == '0' then
					wait for 100 us;
					if RB2 == '1' then
						report("[FAKE LCD ASSERT] DB4 changed state while EN was low !");
						fakeLcdIsSessionInvalid := 1;
					elsif RA5 == '1' then
						report("[FAKE LCD ASSERT] DB4 changed state (set high) while EN was low and remained so after LCD was powered down !");
						fakeLcdIsSessionInvalid := 1;
					else
						report("[FAKE LCD GLITCH] DB4 changed state while EN was low, but LCD powered down shortly thereafter.");
					end if;
				end if;
			end if;
		end loop;
	end process;

	assertEnablePulsesDontViolateTimingConstraints: process is
		variable lastEventTime : cycle;
		variable lastRisingEdgeTime : cycle;
		variable cyclesIn500ns : cycle;
		variable cyclesIn2_2us : cycle;
	begin
		cyclesIn500ns := 4 ic;
		cyclesIn2_2us := 18 ic;

		lastEventTime := 0 ic;
		lastRisingEdgeTime := 0 ic;
		loop
			wait on RA4;
			if RB2 == '1' then
				if RA4 == '1' then
					if (now() < lastEventTime + cyclesIn500ns) then
						report("[FAKE LCD ASSERT] EN was not low for at least 450ns+10% !");
						fakeLcdIsSessionInvalid := 1;
					end if;

					if (now() < lastRisingEdgeTime + cyclesIn2_2us) then
						report("[FAKE LCD ASSERT] EN cycle time needs to be at least 2us+10% !");
						fakeLcdIsSessionInvalid := 1;
					end if;

					lastRisingEdgeTime := now();
				elsif RA4 == '0' then
					if (now() < lastEventTime + cyclesIn500ns) then
						report("[FAKE LCD ASSERT] EN was not high for at least 450ns+10% !");
						fakeLcdIsSessionInvalid := 1;
					end if;
				end if;
				lastEventTime := now();
			end if;
		end loop;
	end process;

	crystal32768Hz: process is
	begin
		report("[FAKE LCD] Driving SOSC with 32.768kHz.");
		OSCSTAT.SOR := '1';
		loop
			SOSCI <= '0';
			wait for 15258 ns;
			SOSCI <= '1';
			wait for 15259 ns;
		end loop;
	end process;

	ncoDriver: process is
	begin
		loop
			wait on NCO1CON;
			if NCO1CON.N1EN != '0' then
				report("[FAKE LCD] Driving NCO with 4ms-1% overflow.");
				while NCO1CON.N1EN != '0' loop
					wait on NCO1CON for 3960 us;
					if NCO1CON.N1EN != '0' then
						PIR7.NCO1IF := '1';
					end if;
				end loop;
				report("[FAKE LCD] NCO disabled.");
			end if;
		end loop;
	end process;

	ncoPreventSimulatorFromDriving: process is
	begin
		loop
			wait on NCO1INCL;
			NCO1INCU := 0;
			NCO1INCH := 0;
			NCO1INCL := 0;
		end loop;
	end process;
end testbench;
